{"ast":null,"code":"import { DashboardData, postUploadImage, getSliderImages, postDeleteImage } from \"./FetchApi\";\nimport { getAllOrder } from \"../orders/FetchApi.js\";\nexport const GetAllData = async dispatch => {\n  let responseData = await DashboardData();\n  if (responseData) {\n    dispatch({\n      type: \"totalData\",\n      payload: responseData\n    });\n  }\n};\nexport const todayAllOrders = async dispatch => {\n  let responseData = await getAllOrder();\n  if (responseData) {\n    dispatch({\n      type: \"totalOrders\",\n      payload: responseData\n    });\n  }\n};\nexport const sliderImages = async dispatch => {\n  try {\n    let responseData = await getSliderImages();\n    if (responseData && responseData.Images) {\n      dispatch({\n        type: \"sliderImages\",\n        payload: responseData.Images\n      });\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const deleteImage = async (id, dispatch) => {\n  dispatch({\n    type: \"imageUpload\",\n    payload: true\n  });\n  try {\n    let responseData = await postDeleteImage(id);\n    if (responseData && responseData.success) {\n      setTimeout(function () {\n        sliderImages(dispatch);\n        dispatch({\n          type: \"imageUpload\",\n          payload: false\n        });\n      }, 1000);\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const uploadImage = async (image, dispatch) => {\n  dispatch({\n    type: \"imageUpload\",\n    payload: true\n  });\n  let formData = new FormData();\n  formData.append(\"image\", image);\n  console.log(formData.get(\"image\"));\n  try {\n    let responseData = await postUploadImage(formData);\n    if (responseData && responseData.success) {\n      setTimeout(function () {\n        dispatch({\n          type: \"imageUpload\",\n          payload: false\n        });\n        sliderImages(dispatch);\n      }, 1000);\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["DashboardData","postUploadImage","getSliderImages","postDeleteImage","getAllOrder","GetAllData","dispatch","responseData","type","payload","todayAllOrders","sliderImages","Images","error","console","log","deleteImage","id","success","setTimeout","uploadImage","image","formData","FormData","append","get"],"sources":["/Users/sanketdetroja/Documents/GitHub/OrgabBridge/client/src/components/admin/dashboardAdmin/Action.js"],"sourcesContent":["import {\n  DashboardData,\n  postUploadImage,\n  getSliderImages,\n  postDeleteImage,\n} from \"./FetchApi\";\nimport { getAllOrder } from \"../orders/FetchApi.js\";\n\nexport const GetAllData = async (dispatch) => {\n  let responseData = await DashboardData();\n  if (responseData) {\n    dispatch({ type: \"totalData\", payload: responseData });\n  }\n};\n\nexport const todayAllOrders = async (dispatch) => {\n  let responseData = await getAllOrder();\n  if (responseData) {\n    dispatch({ type: \"totalOrders\", payload: responseData });\n  }\n};\n\nexport const sliderImages = async (dispatch) => {\n  try {\n    let responseData = await getSliderImages();\n    if (responseData && responseData.Images) {\n      dispatch({ type: \"sliderImages\", payload: responseData.Images });\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const deleteImage = async (id, dispatch) => {\n  dispatch({ type: \"imageUpload\", payload: true });\n  try {\n    let responseData = await postDeleteImage(id);\n    if (responseData && responseData.success) {\n      setTimeout(function () {\n        sliderImages(dispatch);\n        dispatch({ type: \"imageUpload\", payload: false });\n      }, 1000);\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const uploadImage = async (image, dispatch) => {\n  dispatch({ type: \"imageUpload\", payload: true });\n  let formData = new FormData();\n  formData.append(\"image\", image);\n  console.log(formData.get(\"image\"));\n  try {\n    let responseData = await postUploadImage(formData);\n    if (responseData && responseData.success) {\n      setTimeout(function () {\n        dispatch({ type: \"imageUpload\", payload: false });\n        sliderImages(dispatch);\n      }, 1000);\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n"],"mappings":"AAAA,SACEA,aAAa,EACbC,eAAe,EACfC,eAAe,EACfC,eAAe,QACV,YAAY;AACnB,SAASC,WAAW,QAAQ,uBAAuB;AAEnD,OAAO,MAAMC,UAAU,GAAG,MAAOC,QAAQ,IAAK;EAC5C,IAAIC,YAAY,GAAG,MAAMP,aAAa,CAAC,CAAC;EACxC,IAAIO,YAAY,EAAE;IAChBD,QAAQ,CAAC;MAAEE,IAAI,EAAE,WAAW;MAAEC,OAAO,EAAEF;IAAa,CAAC,CAAC;EACxD;AACF,CAAC;AAED,OAAO,MAAMG,cAAc,GAAG,MAAOJ,QAAQ,IAAK;EAChD,IAAIC,YAAY,GAAG,MAAMH,WAAW,CAAC,CAAC;EACtC,IAAIG,YAAY,EAAE;IAChBD,QAAQ,CAAC;MAAEE,IAAI,EAAE,aAAa;MAAEC,OAAO,EAAEF;IAAa,CAAC,CAAC;EAC1D;AACF,CAAC;AAED,OAAO,MAAMI,YAAY,GAAG,MAAOL,QAAQ,IAAK;EAC9C,IAAI;IACF,IAAIC,YAAY,GAAG,MAAML,eAAe,CAAC,CAAC;IAC1C,IAAIK,YAAY,IAAIA,YAAY,CAACK,MAAM,EAAE;MACvCN,QAAQ,CAAC;QAAEE,IAAI,EAAE,cAAc;QAAEC,OAAO,EAAEF,YAAY,CAACK;MAAO,CAAC,CAAC;IAClE;EACF,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACpB;AACF,CAAC;AAED,OAAO,MAAMG,WAAW,GAAG,MAAAA,CAAOC,EAAE,EAAEX,QAAQ,KAAK;EACjDA,QAAQ,CAAC;IAAEE,IAAI,EAAE,aAAa;IAAEC,OAAO,EAAE;EAAK,CAAC,CAAC;EAChD,IAAI;IACF,IAAIF,YAAY,GAAG,MAAMJ,eAAe,CAACc,EAAE,CAAC;IAC5C,IAAIV,YAAY,IAAIA,YAAY,CAACW,OAAO,EAAE;MACxCC,UAAU,CAAC,YAAY;QACrBR,YAAY,CAACL,QAAQ,CAAC;QACtBA,QAAQ,CAAC;UAAEE,IAAI,EAAE,aAAa;UAAEC,OAAO,EAAE;QAAM,CAAC,CAAC;MACnD,CAAC,EAAE,IAAI,CAAC;IACV;EACF,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACpB;AACF,CAAC;AAED,OAAO,MAAMO,WAAW,GAAG,MAAAA,CAAOC,KAAK,EAAEf,QAAQ,KAAK;EACpDA,QAAQ,CAAC;IAAEE,IAAI,EAAE,aAAa;IAAEC,OAAO,EAAE;EAAK,CAAC,CAAC;EAChD,IAAIa,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC7BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEH,KAAK,CAAC;EAC/BP,OAAO,CAACC,GAAG,CAACO,QAAQ,CAACG,GAAG,CAAC,OAAO,CAAC,CAAC;EAClC,IAAI;IACF,IAAIlB,YAAY,GAAG,MAAMN,eAAe,CAACqB,QAAQ,CAAC;IAClD,IAAIf,YAAY,IAAIA,YAAY,CAACW,OAAO,EAAE;MACxCC,UAAU,CAAC,YAAY;QACrBb,QAAQ,CAAC;UAAEE,IAAI,EAAE,aAAa;UAAEC,OAAO,EAAE;QAAM,CAAC,CAAC;QACjDE,YAAY,CAACL,QAAQ,CAAC;MACxB,CAAC,EAAE,IAAI,CAAC;IACV;EACF,CAAC,CAAC,OAAOO,KAAK,EAAE;IACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACpB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}